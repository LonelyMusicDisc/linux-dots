#+title: Emacs Dot Files
#+property: header-args :tangle :tangle ./config.el

#+begin_src elisp
;; This file has been generated from config.org file. DO NOT EDIT.
;; Sources are available from https://github.com/LonelyMusicDisc/doomemacs
;;
;;  __________________________________
;; < Doom emacs is good, that is all. >
;;  ----------------- -- -------------
;;         \   ^_^_^
;;          \  (ooo)\_______
;;             (__)\        )\/\
;;                 ||----w ||
;;                 ||      ||
;;
#+end_src


~config.org~ is my org file to customize ~config.el~, but with documentation and overall /fanciness/.

* Native Compile
Packages get compiled, so they run faster :D

#+BEGIN_SRC emacs-lisp
(setq native-comp-deferred-compilation t
        native-comp-async-report-warnings-errors nil
        native-comp-warning-on-missing-source nil)
#+END_SRC

* Org

#+begin_src emacs-lisp
(setq org-directory "~/Documents/org")
(setq +org-capture-journal-file "~/Documents/journal.org")
#+end_src

* Text
:PROPERTIES:
:HEADER-ARGS: :tangle no
:END:
#+begin_src elisp
(after! ispell
  (let ((_dict (concat (getenv "HOME") "/.local/share/aspell/aspell_dict")))
    (when (file-readable-p _dict)
      (setq ispell-alternate-dictionary _dict))))
#+end_src

* Appearance
** Font

#+begin_src emacs-lisp
;(defvar title-font nil) ; the variable for org-mode headings and titles.
(setq doom-font (font-spec :family "CaskaydiaMono NFM" :size 16)
      doom-variable-pitch-font (font-spec :family "Merriweather Sans" :size 16 :weight 'normal))
#+end_src

** Pretty Org
making org-mode fit more into my visual tastes

#+BEGIN_SRC emacs-lisp

;(add-hook! 'org-mode-hook
;  (setq left-margin-width 30 right-margin-width 30))
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'mixed-pitch-mode)
(add-hook 'org-mode-hook 'menu-bar--display-line-numbers-mode-none)

(custom-theme-set-faces
 'user
 '(org-src ((t (:inherit doom-font))))
 '(org-table ((t (:inherit doom-font))))
 '(org-formula ((t (:inherit doom-font))))
 '(org-todo ((t (:inherit doom-font))))
 '(org-list-dt ((t (:inherit doom-font))))

 '(org-document-title ((t (:family "Merriweather" :height 1.8))))
 '(org-level-1 ((t (:inherit outline-1 :family "Merriweather" :height 1.6))))
 '(org-level-2 ((t (:inherit outline-2 :family "Merriweather" :height 1.3))))
 '(org-level-3 ((t (:inherit outline-3 :family "Merriweather" :height 1.1))))
 '(org-level-4 ((t (:inherit outline-3 :family "Merriweather")))))

#+END_SRC
Switch org-ellipsis with the ~0026~ ellipsis unicode.
#+BEGIN_SRC elisp
(setq org-ellipsis "â€¦")

(setq org-hide-emphasis-markers t)
#+END_SRC

** Pretty Convenient Org
convenient and miscellaneous settings that make my org-life easier, such as setting org-roam's directory and keybindings. Also uses org-chef to insert recipes.

#+BEGIN_SRC emacs-lisp
(setq inhibit-compacting-font-caches t)
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/Documents/org/roam"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today)))

(use-package! org-chef
  :commands (org-chef-insert-recipe org-chef-get-recipe-from-url))
#+END_SRC

** Babel

#+begin_src emacs-lisp
;; active Org-babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (plantuml . t)))
#+end_src

** Pretty Markdown

#+begin_src emacs-lisp
(add-hook 'markdown-mode-hook
          (setq left-margin-width 30 right-margin-width 30))
(add-hook 'markdown-mode-hook 'mixed-pitch-mode)
(add-hook 'markdown-mode-hook 'menu-bar-display-line-numbers-mode-none)
#+end_src

** Templates

#+BEGIN_SRC emacs-lisp
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("verse" . "verse"))
    (set-file-template! "\\character.org$" :trigger "__character" :mode 'org-mode)

(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(setq company-idle-delay 0.05)
(add-hook 'org-after-todo-statistics-hook #'org-summary-todo)
#+END_SRC

** Timer

#+BEGIN_SRC emacs-lisp
; (require 'org)
(setq org-clock-sound "~/.config/.doom.d/sounds/ring.wav")
#+END_SRC


** PlantUML

#+begin_src emacs-lisp
(setq org-plantuml-jar-path
      (expand-file-name "~/org/scripts/plantuml.jar"))
#+end_src

** Pretty Fountain

#+begin_src emacs-lisp
(add-hook! 'fountain-mode-hook
           (setq left-margin-width 15 right-margin-width 15))
#+end_src

** Cursor Color
for some reason ~set-cursor-color~ does not work.

#+begin_src emacs-lisp :tangle no
(setq evil-normal-state-cursor '(box "light blue")
      evil-insert-state-cursor '(bar "medium sea green")
      evil-visual-state-cursor '(hollow "orange"))
#+end_src

** Doom Themes

#+begin_src emacs-lisp
;; `gruvbox-material' contrast and palette options
(setq doom-gruvbox-material-background  "hard"  ; or hard (defaults to soft)
     doom-gruvbox-material-palette     "mix") ; or original (defaults to material)

;; `gruvbox-material-light' contrast and palette options
(setq doom-gruvbox-material-light-background  "medium" ; or hard (defaults to soft)
      doom-gruvbox-material-light-palette     "mix") ; or original (defaults to material)

;(load-theme 'everforest-hard-dark t)
;(setq doom-theme 'everforest-hard-dark)

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** SVG-TAG-MODE

#+begin_src emacs-lisp :tangle no
(add-hook! 'org-mode-hook 'svg-tag-mode)
(require 'svg-tag-mode)
(setq svg-tag-tags
      '(("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-tag
                                               :radius 0 :inverse t :margin 0))))))
#+end_src

** .TODO States

#+BEGIN_SRC emacs-lisp :tangle no
(after! org
  (setq org-todo-keywords '((sequence "TODO(t)" "PROJ(p)" "WAIT(w)" "LATER(l)" "NOW(n)" "|" "DONE(d)" "CANCELLED(c)")))
                )
#+END_SRC


* Projectile
The following elisp makes the home directory ignore by projectile, or at least tries to.

#+caption: code from https://oracleyue.github.io/post/fix-issues-projectile/
#+begin_src emacs-lisp
(setq projectile-ignored-projects '("~/"))
;
;  ;; Due to "alien" indexing method, globally ignore folders/files by
;  ;; re-defining "rg" args
;  (mapc (lambda (item)
;          (add-to-list 'projectile-globally-ignored-directories item))
;        '("Backup" "backup" "auto" "archived"))
;  ;; files to be ignored should be listed in "~/.emacs.d/rg_ignore"
;
;  ;; Use the faster searcher to handle project files: ripgrep "rg"
;  (when (and (not (executable-find "fd"))
;             (executable-find "rg"))
;    (setq projectile-generic-command
;          (let ((rg-cmd ""))
;            (dolist (dir projectile-globally-ignored-directories)
;              (setq rg-cmd (format "%s --glob '!%s'" rg-cmd dir)))
;            (setq rg-ignorefile
;                  (concat "--ignore-file" " "
;                          (expand-file-name "rg_ignore" user-emacs-directory)))
;            (concat "rg -0 --files --color=never --hidden" rg-cmd " " rg-ignorefile))))

#+end_src

* Coding
** Lua
Lua-specific settings.

#+begin_src emacs-lisp
(add-hook! lua-mode-hook
  (menu-bar--display-line-numbers-mode-absolute)
  (setq lua-indent-level 3)
  (setq evil-shift-width 3)
  (set-tab-indention 3) ; is a macro, ignore.
  )
#+end_src

** LSP Servers

#+begin_src emacs-lisp :tangle no
(use-package! lsp-volar)
#+end_src

** Volar

#+begin_src emacs-lisp :tangle no
(defadvice! +lsp--create-filter-function (workspace)
  :override #'lsp--create-filter-function
  (let ((body-received 0)
        leftovers body-length body chunk)
    (lambda (_proc input)
      (setf chunk (if (s-blank? leftovers)
                      input
                    (concat leftovers input)))

      (let (messages)
        (while (not (s-blank? chunk))
          (if (not body-length)
              ;; Read headers
              (if-let ((body-sep-pos (string-match-p "\r\n\r\n" chunk)))
                  ;; We've got all the headers, handle them all at once:
                  (setf body-length (lsp--get-body-length
                                     (mapcar #'lsp--parse-header
                                             (split-string
                                              (substring-no-properties chunk
                                                                       (or (string-match-p "Content-Length" chunk)
                                                                           (error "Unable to find Content-Length header."))
                                                                       body-sep-pos)
                                              "\r\n")))
                        body-received 0
                        leftovers nil
                        chunk (substring-no-properties chunk (+ body-sep-pos 4)))

                ;; Haven't found the end of the headers yet. Save everything
                ;; for when the next chunk arrives and await further input.
                (setf leftovers chunk
                      chunk nil))
            (let* ((chunk-length (string-bytes chunk))
                   (left-to-receive (- body-length body-received))
                   (this-body (if (< left-to-receive chunk-length)
                                  (prog1 (substring-no-properties chunk 0 left-to-receive)
                                    (setf chunk (substring-no-properties chunk left-to-receive)))
                                (prog1 chunk
                                  (setf chunk nil))))
                   (body-bytes (string-bytes this-body)))
              (push this-body body)
              (setf body-received (+ body-received body-bytes))
              (when (>= chunk-length left-to-receive)
                (condition-case err
                    (with-temp-buffer
                      (apply #'insert
                             (nreverse
                              (prog1 body
                                (setf leftovers nil
                                      body-length nil
                                      body-received nil
                                      body nil))))
                      (decode-coding-region (point-min)
                                            (point-max)
                                            'utf-8)
                      (goto-char (point-min))
                      (while (search-forward "\\u0000" nil t)
                        (replace-match "" nil t))
                      (goto-char (point-min))
                      (push (lsp-json-read-buffer) messages))

                  (error
                   (lsp-warn "Failed to parse the following chunk:\n'''\n%s\n'''\nwith message %s"
                             (concat leftovers input)
                             err)))))))
        (mapc (lambda (msg)
                (lsp--parser-on-message msg workspace))
              (nreverse messages))))))
#+end_src

** Format All :HANDLE:
Okay, not really a language, but it gives this weird popup that takes up half of the screen.

#+begin_src emacs-lisp
(setq format-all-show-errors 'never)
#+end_src

** Typescript

#+begin_comment emacs-lisp
(add-hook 'typescript-mode-hook
          (lambda ()
            (set (make-local-variable 'compile-command)
                 (string "tsc"))))
#+end_comment

** Godot

#+begin_src emacs-lisp
(setq gdscript-godot-executable "~/AppImages/Godot_v3.5.2-stable_mono_x11.64")
#+end_src

** HTML

#+begin_src emacs-lisp
(set-formatter! 'js-reautify  "js-beautify --type html" :modes '(web-mode))
#+end_src

** Rust

#+begin_src emacs-lisp :tangle no
; (after! lsp-ui
;   (setq lsp-ui-doc-use-childframe t
;         lsp-ui-doc-position 'at-point))
;(setq lsp-rust-analyzer-server-display-inlay-hints t)
;(setq lsp-signature-render-documentation nil)
#+end_src

** Codeium AI

#+begin_src emacs-lisp :tangle no
(add-to-list 'completion-at-point-functions #'codeium-completion-at-point)
#+end_src
Company code.
#+begin_src emacs-lisp :tangle no
(use-package company
    :config
    (setq-default
        ;; get only preview
        company-frontends '(company-preview-frontend)
        ;; also get a drop down
        company-frontends '(company-pseudo-tooltip-frontend company-preview-frontend)
        ))
#+end_src

* Social
** IRC

#+begin_src emacs-lisp
(after! circe
  (set-irc-server! "irc.libera.chat"
    `(:tls t
      :port 6697
      :nick "LonelyMusicDisc"
      :sasl-username ,(+pass-get-user "irc/libera.chat")
      :sasl-password (lambda (&rest _) (+pass-get-secret "irc/libera.chat"))
      :channels ("#minetest")))
  )
#+end_src
* Functional
** Change Tab Spacing :FUNCTION:MACRO:

#+begin_src emacs-lisp
(defmacro set-tab-indention (number)
  "Sets the amount of spaces the tab key produces."
  (setq indent-tabs-mode nil)
  (setq tab-width number)
  (setq tab-stop-list '(number (* number 2))))
#+end_src

#+begin_src emacs-lisp :tangle no
(macroexpand '(set-tab-indention 3))
#+end_src

** Set Window Margins
:INTERACTIVE:
There are times where I want the window (usually an org-mode buffer) to have no margins, or more.

#+begin_src emacs-lisp
(defun set-window-margin-width ()
  "Set the current window's margins."
  (interactive)
  (let (amount)
    (setq amount (read-number "Set margin amount to: " 30))
    (setq +text-mode-margins-width amount)))
#+end_src

[[https://discourse.doomemacs.org/t/setting-window-margins-for-particular-buffers-org-in-particular/2868/8][Code]] by [[https://discourse.doomemacs.org/u/tecosaur][Tecosaur on Discourse]].

#+begin_src emacs-lisp
(defvar +text-mode-margins-width 30
  "The `right-margin-width' and `left-margin-width' to be used in `text-mode' buffers.")

(defun +setup-text-mode-margins ()
  (when (and (derived-mode-p 'text-mode)
             (eq (current-buffer)
                 (window-buffer (frame-selected-window))))
    (set-window-margins (car (get-buffer-window-list (current-buffer) nil t)) +text-mode-margins-width +text-mode-margins-width)))
#+end_src

The hooks:

#+begin_src emacs-lisp
(add-hook 'window-configuration-change-hook #'+setup-text-mode-margins)
(add-hook 'display-line-numbers-mode-hook #'+setup-text-mode-margins)
(add-hook 'text-mode-hook #'+setup-text-mode-margins)
#+end_src

Advice!

#+begin_src emacs-lisp
(defadvice! +doom/toggle-line-numbers--call-hook-a ()
  :after #'doom/toggle-line-numbers
  (run-hooks 'display-line-numbers-mode-hook))
#+end_src

Remove the line-numbers hook from text mode.

#+begin_src emacs-lisp
(remove-hook 'text-mode-hook #'display-line-numbers-mode)
#+end_src

** Key Bindings
#+begin_src emacs-lisp
(map! :nv "SPC w m r" #'set-window-margin-width)
(map! :nv "U" #'evil-redo)

(map!
 :nv "SPC w ]" #'evil-window-right
 :nv "SPC w [" #'evil-window-left)

(map! :leader :prefix-map ("t" . "toggle")
      :desc "Auto completion"     "a" #'company-mode)

#+end_src

** CANCELLED Toggle Window :FUNCTION:
A notes-like window that you can view and hide at any moment sounds really cool, I wanna try it out.

#+begin_src emacs-lisp :tangle no
(require 'popwin)
(popwin-mode 1)

(get-buffer-create "special-buffer")

(setq tmp/special-buffer-displayed nil)
(setq tmp/special-buffer "special-buffer")

(add-to-list 'popwin:special-display-config
         `(,tmp/special-buffer :width 30 :position right :stick t))

(defun tmp/special-buffer-toggle ()
  (interactive)
  (if tmp/special-buffer-displayed
      (progn
      (popwin:close-popup-window)
      (setq tmp/special-buffer-displayed nil))
    (progn
      (ignore-errors (popwin:display-buffer tmp/special-buffer))
      (setq tmp/special-buffer-displayed 't)
      (set-window-margins (get-buffer-window) 0 0))))

;(global-set-key (kbd "<leader> \\") 'tmp/special-buffer-toggle)
(map! :leader :desc "Toggle Special Buffer" "\\" (lambda () (interactive) (tmp/special-buffer-toggle)))
#+end_src

** Sprinter Mode (sprinter-mode) :MODE:
Minor mode that helps prevent loss of focus when writing, to maximize speed.

#+begin_src emacs-lisp
(define-minor-mode sprinter-mode
  "Toggles sprinter minor mode. Helps writing sprints not get interuppted by editing."
  :init-value nil
  :global nil
  :group 'writing
  :lighter " sprinter")

(add-hook! 'sprinter-mode-on-hook
           (message "sprinter-mode enabled!")
           (company-mode 0))

(add-hook! 'sprinter-mode-off-hook
           (message "sprinter mode disabled!")
           (flyspell-mode 1)
           (company-mode nil))

(setq git-gutter:disabled-modes
       (cons 'org-mode git-gutter:disabled-modes))
#+end_src

* Server
#+begin_src emacs-lisp
(server-start)
#+end_src
